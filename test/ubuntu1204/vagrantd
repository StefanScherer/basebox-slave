#!/usr/bin/perl -w

# this script runs vagrant in debug mode, writes all debug info into a 
# numbered log file, prints normal output on console with a relative
# timestamp to measure time. You don't have to append --debug or set
# the VAGRANT_LOG environment variable.

# Usage: vagrantd any command you like

# 1. creates a counter.txt file in current directory to save the number
# 2. creates number-vagrant-any-command-you-like.log file for each
#    time you called with this script.

# Notice: This script could be renamed to use it do 'debug' other programs as well.

# derived from http://www.perlmonks.org/?node_id=150748 by abstracts on Mar 15, 2002 at 01:59 UTC

use strict;
use warnings;
#use diagnostics;
use IPC::Open3;
use IO::Select;
use Symbol;
use Time::HiRes qw(gettimeofday tv_interval);

my $t0 = [gettimeofday];
my $argv0 = substr $0, 0, (length($0) - 1);
$argv0 =~ s/^.*\///; # remove ./ or /Users/... any path 

my $cmd = "$argv0 @ARGV";

my $counter = increaseCounter();

my $logfile = sprintf "%02d-%s.log", $counter, $cmd;
$logfile =~ s/[\s=\-]+/-/g;

# make vagrant run in debug mode
if ($cmd =~ /^vagrant/ && $cmd !~ /--debug/) {
    $cmd .= " --debug";
}

my $elapsed = tv_interval($t0);
printf "%07.3f START: $cmd\n", $elapsed;
printf "%07.3f LOGFILE: $logfile\n", $elapsed;

my $logfh;
open $logfh, ">$logfile" or die "Can't open logfile $logfile: $!";

my ($infh,$outfh,$errfh);
$errfh = gensym(); # if you uncomment this line, $errfh will
                   # never be initialized for you and you
                   # will get a warning in the next print
                   # line.
my $pid;
eval{
   $pid = open3($infh, $outfh, $errfh, $cmd);
};
die $@ if $@;

# now our child is running, happily printing to 
# its stdout and stderr (our $outfh and $errfh).

my $sel = new IO::Select; # create a select object
$sel->add($outfh,$errfh); # and add the fhs

# $sel->can_read will block until there is data available
# on one or more fhs
while(my @ready = $sel->can_read) {
    # now we have a list of all fhs that we can read from
    foreach my $fh (@ready) { # loop through them
        my $line = <$fh>; # read one line from this fh
        if(not defined $line){ # EOF on this FH
            $sel->remove($fh); # remove it from the list
            next;              # and go handle the next FH
        }
        my $elapsed = sprintf "%07.3f", tv_interval($t0);
        if($fh == $outfh) {     # if we read from the outfh
            if ($line !~ /^(\s*<|\"SEND|\"RECV)/ ) { # skip vagrant-vloud debug HTTP traffic
                print "$elapsed $line"; # print it to OUTFH
            }
            print $logfh $line;
        } elsif($fh == $errfh) {# do the same for errfh  
            if ($line =~ /INFO interface: error: (.*)/ ) { # print error messages
                print "$elapsed $1\n"; # print it to OUTFH
            }
            print $logfh $line;
        } else { # we read from something else?!?!
            die "Shouldn't be here\n";
        }
    }
}

# go ahead and reap it
waitpid $pid, 0; # wait for it to die
close $logfh;

my $total = tv_interval($t0);
printf "%07.3f EXITCODE: $?\n", $total;


sub increaseCounter
{
    my $counter = 1;
    if (-f "counter.txt") {
        open my $fh, "counter.txt" or return $counter;
        $counter = <$fh>;
        $counter++;
        close $fh;
    }
    open my $fh, ">counter.txt" or return $counter;
    print $fh "$counter\n";
    close $fh;
    return $counter;
}
